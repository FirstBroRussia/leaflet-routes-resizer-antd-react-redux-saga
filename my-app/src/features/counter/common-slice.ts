import {createSlice} from '@reduxjs/toolkit';

const COMMON_SLICE = 'COMMON_SLICE';

export type InitialStateType = {
  isInitial: boolean,
  key: number,
  currentLoadingPoint: string,
  currentUnloadingPoint: string,
};

const initialState: InitialStateType = {
  isInitial: false,
  key: 0,
  currentLoadingPoint: '',
  currentUnloadingPoint: '',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

// export const incrementAsync = createAsyncThunk(
//   'counter/fetchCount',
//   async (amount) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );

export const commonSlice = createSlice({
  name: COMMON_SLICE,
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setPrimaryInitialProposalAction: (state, action) => {
      state.isInitial = true;
      state.key = action.payload;
    },
    setTargetProposalKeyAction: (state, action) => {
      state.key = action.payload.key;
      state.currentLoadingPoint = action.payload.currentLoadingPoint;
      state.currentUnloadingPoint = action.payload.currentUnloadingPoint;
    },
    setCurrentLoadingPointAction: (state, action) => {
      state.currentLoadingPoint = action.payload;
    },
    setCurrentUnloadingPointAction: (state, action) => {
      state.currentUnloadingPoint = action.payload;
    },

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.value += action.payload;
  //     });
  // },
});

export const {setPrimaryInitialProposalAction, setTargetProposalKeyAction, setCurrentLoadingPointAction, setCurrentUnloadingPointAction} = commonSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

// export const selectCount = (state) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default commonSlice;
